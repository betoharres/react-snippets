#
#  React snippets
#

snippet rh "React Hooks Function" b
import React, { useState${2:, useEffect} } from 'react'
import PropTypes from 'prop-types'

function ${1:`!v expand('%:t:r')`} (${3:props}) {
	return (
		${4:null}
	)
}

$1.propTypes = {
}

export default $1
endsnippet

snippet rnh "React Native Hooks Function" b
import React, { useState${2:, useEffect} } from 'react'
import { View, Text${3:, TouchableOpacity} } from 'react-native'
import PropTypes from 'prop-types'

function ${1:`!v expand('%:t:r')`} (${4:props}) {
	return (
		<View>
			${5:null}
		</View>
	)
}

$1.propTypes = {
}
export default $1
endsnippet

snippet ue "React useEffect" b
useEffect(() => {
}, ${1:[]})
endsnippet

snippet us "React useEffect" b
const [$1, set$2] = useState($3)
endsnippet

snippet rrcc "React Redux Class Component" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import * as ${2}ActionCreators from '../../redux/modules/$2'

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		children: PropTypes.node,
		dispatch: PropTypes.func.isRequired,
	}

	render() {
		return (
			${3:null}
		)
	}
}

function mapStateToProps (state) {
	return {}
}

function mapDispatchToProps (dispatch) {
	return bindActionCreators($2ActionCreators, dispatch)
}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet rcc "create class/component" b
import React, { Component } from 'react'

class ${1:`!v expand('%:t:r')`} extends Component {

	render () {
		return (
			${2:null}
		)
	}
}
$0
export default $1
endsnippet

snippet rncc "create native class/component" b
import React, { Component } from 'react'
import { View${2}} from 'react-native'

class ${1:`!v expand('%:t:r')`} extends Component {
$0
	render () {
		return (
			<View></View>
		)
	}
}

export default $1
endsnippet

snippet rrncc "create redux native class/component" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { View } from 'react-native'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'

import * as ${2}ActionCreators from '../../redux/modules/$2'

class ${1:`!v expand('%:t:r')`} extends Component {

	static propTypes = {
		children: PropTypes.node,
	}

	render () {
		return (
			<View>$0</View>
		)
	}
}

function mapStateToProps ({$2}) {
	return {$2}
}

function mapDispatchToProps (dispatch) {
	return bindActionCreators($2ActionCreators, dispatch)
}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet


snippet rcsc "create stateless component" b
import React from 'react'
$4
export default function ${1:`!v expand('%:t:r')`} (${2:props}) {

	return (
		${3}
	)

}
endsnippet

snippet rncsc "create native stateless component" b
import React from 'react'
import { View, Text, ${3:StyleSheet} } from 'react-native'

export default function ${1:`!v expand('%:t:r')`} (props) {

	return (
		<View>
			<Text>${2}</Text>
		</View>
	)

}

${3:const styles = StyleSheet.create({
})}
endsnippet

snippet im "import" b
import $1 from '${2}'
endsnippet

snippet imm "import with brackets" b
import { $1 } from '${2}'
endsnippet

snippet imrn "import react native components" b
import { View, Text${3:, TouchableOpacity} } from 'react-native'
endsnippet

snippet ex "export component" b
export { default as ${1}${2} } from './$1/$1$2'
endsnippet

snippet fu "create function" i
function ${1} (${2}) {
	${3}
}
endsnippet

snippet ef "export function" b
export function ${1} (${2}) {
	${3}
}
endsnippet

snippet edf "export default function" b
export default function ${1} (${2}) {
	${3}
}
endsnippet

snippet () "annon function" i
() => ${1:{}}
endsnippet

snippet if "if statement"
if (${1}){
	${2}
}
endsnippet

snippet constructor "React constructor" b
constructor (props) {
	super(props)
	this.state = {
		${1}: ${2},
	}
}$0
endsnippet

snippet cdm "component did mount" b
componentDidMount () {
	${1}
}$0
endsnippet

snippet cdu "component did update" b
componentDidUpdate (prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps (nextProps) {
	${1}
}$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount () {
	${1}
}$0
endsnippet

snippet cwup "component will update" b
componentWillUpdate (nextProps, nextState) {
	${1}
}$0
endsnippet

snippet scu "should component update" i
shouldComponentUpdate (nextProps, nextState) {
	${1}
}$0
endsnippet

snippet dp "default props" b
$1.defaultProps = {
	$2: $3,
}
endsnippet

snippet pt "propTypes" b
${1}.propTypes = {
	${2}: PropTypes.${3:string}.isRequired,
}
endsnippet

snippet cs "create StyleSheet" b
const styles = StyleSheet.create({
	${1}: {
		${2}: ${3},
	},
})
endsnippet

snippet tss "set state" b
this.setState({
	${1}: ${2}
})$0
endsnippet

snippet prp "get property" i
this.props.${1}
endsnippet

snippet st "get state" i
this.state.${1}
endsnippet

snippet cl "log console" i
console.log(${1})
endsnippet

snippet co "const" i
const $1 = $2
endsnippet

snippet le "let" i
let $1 = $2
endsnippet

snippet db "debugger" b
debugger
endsnippet

snippet rr "redux reducer" i
const initialState = {}

export default function ${1:`!v expand('%:t:r')`} (state = initialState, action) {
	switch (action.type) {

		default :
			return state
	}
}
endsnippet

snippet rcs "redux case switch" b
case $1 :
	return { ...state, ...{$2: action.$2} }
endsnippet

snippet rce "redux case switch" b
case $1_ERROR :
	return {
		...state,
		action.errors
	}
endsnippet

snippet ra "redux action" b
${0: }const ${1} = '$1'
endsnippet

snippet racc "redux action creator with constant" b
export const $3 = '$3'
export function ${1} (${2}) {
	return {
		type: ${3},$0
	}
}
endsnippet

snippet rac "redux action creator" b
export function ${1} (${2}) {
	return {
		type: ${3},$0
	}
}
endsnippet

